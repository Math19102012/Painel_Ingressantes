import pandas as pd
import ast
from wordcloud import WordCloud
from nltk.corpus import stopwords
import nltk
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import streamlit as st


nltk.download('stopwords')

def grafico_renda(df: pd.DataFrame):
    st.subheader("üí∞ Perfil Socioecon√¥mico")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Renda Individual Mensal (R$)**")
        if "Qual sua renda individual mensal em (R$)?" in df.columns:
            plot_renda(df, "Qual sua renda individual mensal em (R$)?")

    with col2:
        st.markdown("**Renda Familiar Mensal (R$)**")
        if "Qual sua renda familiar mensal (em R$)?" in df.columns:
            plot_renda(df, "Qual sua renda familiar mensal (em R$)?")

def plot_renda(df, coluna):
    renda_counts = df[coluna].value_counts(dropna=True).sort_index()
    total = renda_counts.sum()
    renda_percent = (renda_counts / total * 100).round(1)

    fig, ax = plt.subplots(figsize=(6, 4))
    renda_percent.sort_values().plot(kind='barh', ax=ax, color="#4E79A7", edgecolor="black")
    ax.set_xlabel("Percentual (%)")
    ax.set_ylabel("Faixa de Renda")
    ax.set_title("Distribui√ß√£o por Faixa de Renda")
    for i, v in enumerate(renda_percent.sort_values()):
        ax.text(v + 0.5, i, f"{v:.1f}%", va='center')
    st.pyplot(fig)

def grafico_cargo(df: pd.DataFrame):
    st.subheader("üëî Situa√ß√£o Profissional dos Ingressantes")

    # Corrigir nome da coluna
    nome_coluna_cargo = [col for col in df.columns if "n√≠vel hier√°rquico" in col.lower()]
    if not nome_coluna_cargo:
        st.warning("Coluna de cargo n√£o encontrada na base de dados.")
        return

    col = nome_coluna_cargo[0]
    cargos_raw = df[col].dropna().astype(str).str.strip().str.lower()

    # Agrupamento manual de categorias similares
    mapeamento = {
        "estagiario": "Est√°gio",
        "estagi√°ria": "Est√°gio",
        "est√°gio": "Est√°gio",
        "trainee": "Trainee",
        "analista": "Analista",
        "assistente": "Assistente",
        "gerente": "Gest√£o",
        "coordena√ß√£o": "Gest√£o",
        "coordenador": "Gest√£o",
        "supervisor": "Gest√£o",
        "diretor": "Alta Lideran√ßa",
        "presidente": "Alta Lideran√ßa",
        "sem trabalho": "N√£o trabalha",
        "n√£o trabalha": "N√£o trabalha",
        "desempregado": "N√£o trabalha"
    }

    # Classifica√ß√£o por tema
    def categorizar_cargo(c):
        for chave, valor in mapeamento.items():
            if chave in c:
                return valor
        return c.title()

    cargos_limpos = cargos_raw.apply(categorizar_cargo)
    contagem = cargos_limpos.value_counts()
    total = contagem.sum()
    porcentagem = (contagem / total * 100).round(1)

    fig, ax = plt.subplots(figsize=(6, 4))
    porcentagem.sort_values().plot(kind='barh', ax=ax, color="#F28E2B", edgecolor="black")
    ax.set_xlabel("Percentual (%)")
    ax.set_ylabel("Cargo")
    ax.set_title("Distribui√ß√£o por N√≠vel Hier√°rquico")
    for i, v in enumerate(porcentagem.sort_values()):
        ax.text(v + 0.5, i, f"{v:.1f}%", va='center')
    st.pyplot(fig)

def grafico_primeira_faculdade(df: pd.DataFrame):
    st.subheader("üéì Primeira Experi√™ncia no Ensino Superior")

    col = [c for c in df.columns if "primeira experi√™ncia" in c.lower()]
    if not col:
        st.warning("Coluna de primeira experi√™ncia n√£o encontrada.")
        return

    coluna = col[0]
    dados = df[coluna].dropna().str.strip()
    contagem = dados.value_counts()
    total = contagem.sum()
    percentual = (contagem / total * 100).round(1)

    fig, ax = plt.subplots()
    cores = ["#59A14F", "#EDC948", "#E15759"]
    ax.pie(percentual, labels=percentual.index, autopct='%1.1f%%', startangle=140, colors=cores, textprops={'fontsize': 10})
    ax.set_title("Primeira Faculdade?")
    st.pyplot(fig)

def grafico_canais_agrupados(df: pd.DataFrame):
    st.subheader("üß≠ Canais de Descoberta da FECAP (Agrupado por Categoria)")

    col = [c for c in df.columns if "quais meios" in c.lower()]
    if not col:
        st.warning("Coluna de meios de comunica√ß√£o n√£o encontrada.")
        return

    coluna = col[0]
    respostas = df[coluna].dropna().astype(str)

    def limpar_item(item):
        return (
            item.strip()
            .lower()
            .replace("[", "")
            .replace("]", "")
            .replace('"', "")
            .replace("'", "")
            .strip()
        )

    todas_respostas = []
    for linha in respostas:
        for item in linha.split(";"):
            item_limpo = limpar_item(item)
            if item_limpo:
                todas_respostas.append(item_limpo)

    categorias = {
        "Indica√ß√£o": ["fam√≠lia", "amigos", "professores de ensino m√©dio", "professores de cursinho", "profissionais de mercado"],
        "Pesquisa Online": ["pesquisa na internet (google)", "site da fecap"],
        "Redes Sociais": ["facebook", "instagram", "youtube", "twitter", "linkedin"],
        "Comunica√ß√£o": ["an√∫ncio na r√°dio", "an√∫ncios no metr√¥", "e-mails de divulga√ß√£o"],
        "Eventos": ["eventos no seu col√©gio", "feiras estudantis"],
        "Reputa√ß√£o/Ranking": ["rankings especializados (ex.: guia da faculdade)", "mat√©rias na imprensa"],
        "Programas P√∫blicos": ["prouni"],
        "Conv√™nios": ["trabalho na institui√ß√£o", "conv√™nio com a aasp (oab)", "conv√™nio com empresa em que eu trabalho"]
    }

    def categorizar(item):
        for categoria, termos in categorias.items():
            if item in termos:
                return categoria
        return "Outros"

    categorizados = [categorizar(resposta) for resposta in todas_respostas]
    contagem = pd.Series(categorizados).value_counts()
    total = contagem.sum()
    percentual = (contagem / total * 100).round(1)

    fig, ax = plt.subplots(figsize=(7, 5))
    percentual.sort_values().plot(kind='barh', ax=ax, color="#76B7B2", edgecolor="black")
    ax.set_xlabel("Percentual (%)")
    ax.set_ylabel("Categoria")
    ax.set_title("Canais de Descoberta da FECAP (Agrupados)")
    for i, v in enumerate(percentual.sort_values()):
        ax.text(v + 0.5, i, f"{v:.1f}%", va='center')
    st.pyplot(fig)

def grafico_subcategorias(df: pd.DataFrame, categoria_desejada: str):
    st.subheader(f"üîç Subcategorias em '{categoria_desejada}'")

    col = [c for c in df.columns if "quais meios" in c.lower()]
    if not col:
        st.warning("Coluna de meios de comunica√ß√£o n√£o encontrada.")
        return

    coluna = col[0]
    respostas = df[coluna].dropna().astype(str)

    def limpar_item(item):
        return (
            item.strip()
            .lower()
            .replace("[", "")
            .replace("]", "")
            .replace('"', "")
            .replace("'", "")
            .strip()
        )

    todas_respostas = []
    for linha in respostas:
        for item in linha.split(";"):
            item_limpo = limpar_item(item)
            if item_limpo:
                todas_respostas.append(item_limpo)

    categorias = {
        "Indica√ß√£o": ["fam√≠lia", "amigos", "professores de ensino m√©dio", "professores de cursinho", "profissionais de mercado"],
        "Pesquisa Online": ["pesquisa na internet (google)", "site da fecap"],
        "Redes Sociais": ["facebook", "instagram", "youtube", "twitter", "linkedin"],
        "Comunica√ß√£o": ["an√∫ncio na r√°dio", "an√∫ncios no metr√¥", "e-mails de divulga√ß√£o"],
        "Eventos": ["eventos no seu col√©gio", "feiras estudantis"],
        "Reputa√ß√£o/Ranking": ["rankings especializados (ex.: guia da faculdade)", "mat√©rias na imprensa"],
        "Programas P√∫blicos": ["prouni"],
        "Conv√™nios": ["trabalho na institui√ß√£o", "conv√™nio com a aasp (oab)", "conv√™nio com empresa em que eu trabalho"]
    }

    termos = categorias.get(categoria_desejada)
    if not termos:
        st.info("Categoria ainda sem termos definidos.")
        return

    subcontagem = [resp for resp in todas_respostas if resp in termos]
    if not subcontagem:
        st.info("Nenhuma ocorr√™ncia encontrada para essa categoria.")
        return

    contagem = pd.Series(subcontagem).value_counts()
    total = contagem.sum()
    percentual = (contagem / total * 100).round(1)

    fig, ax = plt.subplots(figsize=(6, 4))
    percentual.sort_values().plot(kind='barh', ax=ax, color="#FF9DA7", edgecolor="black")
    ax.set_xlabel("Percentual (%)")
    ax.set_ylabel("Subcategoria")
    ax.set_title(f"Detalhamento da Categoria: {categoria_desejada}")
    for i, v in enumerate(percentual.sort_values()):
        ax.text(v + 0.5, i, f"{v:.1f}%", va='center')
    st.pyplot(fig)

def grafico_influencia_fatores(df: pd.DataFrame):
    st.subheader("‚ú® Fatores que Influenciaram a Escolha pela FECAP")

    colunas_influencia = [
        "Proximidade da resid√™ncia",
        "Proximidade do trabalho",
        "Recomenda√ß√µes de amigos",
        "Recomenda√ß√µes de alunos e ex-alunos",
        "Recomenda√ß√µes de familiares",
        "Recomenda√ß√µes de Professores de Ensino M√©dio-B√°sico",
        "Recomenda√ß√µes de Profissionais de Mercado",
        "Informa√ß√µes no Facebook",
        "Informa√ß√µes no Instagram",
        "Informa√ß√µes no Youtube",
        "Informa√ß√µes no Linkedin",
        "Corpo Docente (Professores da FECAP)",
        "Matriz Curricular do Curso",
        "Resultados no ENADE-MEC",
        "Resultados em Rankings (ex: Guia da Faculdade)",
        "Pre√ßo do Curso",
        "Instala√ß√µes e Infraestrutura",
        "Servi√ßos de atendimento e recep√ß√£o",
        "Prest√≠gio do Curso",
        "Prest√≠gio da Marca FECAP"
    ]

    escala = [
        "Influenciou muito negativamente",
        "Influenciou negativamente",
        "Neutro",
        "Influenciou positivamente",
        "Influenciou muito positivamente"
    ]

    dados_plot = pd.DataFrame()

    for coluna in colunas_influencia:
        if coluna in df.columns:
            contagem = df[coluna].value_counts().reindex(escala, fill_value=0)
            dados_plot[coluna] = contagem

    dados_plot = dados_plot.T
    dados_plot.index.name = "Fator"
    dados_plot.reset_index(inplace=True)

    fig = go.Figure()
    for cat in escala:
        fig.add_trace(go.Bar(
            y=dados_plot["Fator"],
            x=dados_plot[cat],
            name=cat,
            orientation="h"
        ))

    fig.update_layout(
        barmode="stack",
        colorway=["#8B0000", "#FF9999", "#A9A9A9", "#90EE90", "#006400"],
        xaxis_title="N√∫mero de Respostas",
        yaxis_title="Fatores",
        title="Influ√™ncia dos Fatores na Escolha pela FECAP",
        height=800,
        legend_title="Tipo de Influ√™ncia"
    )

    st.plotly_chart(fig, use_container_width=True)

def grafico_satisfacao_processos(df: pd.DataFrame):
    st.subheader("üìû Satisfa√ß√£o com os Processos de Relacionamento")

    colunas_satisfacao = [
        "Informa√ß√µes da FECAP no Site",
        "Informa√ß√µes do Curso escolhido no site",
        "Atendimento Telef√¥nico quando eu liguei para a FECAP",
        "Atendimento Telef√¥nico quando recebi telefonemas da FECAP",
        "Atendimento pelo WhatsApp",
        "Atendimento por M√≠dias Sociais",
        "Atendimento por email (sejafecap@fecap.br)",
        "Visita Guiada pelo Campus",
        "Ficha de inscri√ß√£o do processo seletivo (internet)",
        "Organiza√ß√£o da FECAP no dia do Vestibular",
        "Qualidade da prova de vestibular",
        "Acesso aos resultados do processo seletivo (aprova√ß√£o)",
        "Atendimento na Matr√≠cula",
        "Atendimento no Departamento Financeiro"
    ]

    escala = [
        "N√£o utilizei",
        "Muito insatisfeito",
        "Insatisfeito",
        "Neutro",
        "Satisfeito",
        "Muito satisfeito"
    ]

    dados_plot = pd.DataFrame()

    for coluna in colunas_satisfacao:
        if coluna in df.columns:
            contagem = df[coluna].value_counts().reindex(escala, fill_value=0)
            dados_plot[coluna] = contagem

    dados_plot = dados_plot.T
    dados_plot.index.name = "Processo"
    dados_plot.reset_index(inplace=True)

    fig = go.Figure()
    for cat in escala:
        fig.add_trace(go.Bar(
            y=dados_plot["Processo"],
            x=dados_plot[cat],
            name=cat,
            orientation="h"
        ))

    fig.update_layout(
        barmode="stack",
        colorway=[
        "#87CEFA",  # Muito satisfeito - verde escuro
        "#8B0000",  # Satisfeito - verde claro
        "#FF9999",  # Neutro - cinza
        "#A9A9A9",  # Insatisfeito - vermelho claro
        "#90EE90",  # Muito insatisfeito - vermelho escuro
        "#006400"   # N√£o utilizei - azul claro
    ],
        xaxis_title="N√∫mero de Respostas",
        yaxis_title="Processo de Relacionamento",
        title="Satisfa√ß√£o com os Processos de Relacionamento da FECAP",
        height=900,
        legend_title="N√≠vel de Satisfa√ß√£o"
    )

    st.plotly_chart(fig, use_container_width=True)

def grafico_categoria_outros_processos(df: pd.DataFrame):
    st.subheader("üè´ Tipo de Institui√ß√µes em que os Ingressantes Tamb√©m Prestaram Processo Seletivo")

    col = [c for c in df.columns if "processo seletivo em quais institui√ß√µes" in c.lower()]
    if not col:
        st.warning("Coluna do processo seletivo em outras institui√ß√µes n√£o foi encontrada.")
        return

    coluna = col[0]
    respostas = df[coluna].dropna().astype(str)

    # Mapeamento de categorias
    categorias = {
        "Federais": ["Federais (SISU)"],
        "Estaduais": ["USP (Fuvest)", "Unesp", "Unicamp"],
        "Privadas": [
            "FGV", "Insper", "FAAP", "Mackenzie", "PUC", "FEI", "FIAP",
            "Anhembi", "FMU", "Uninove", "UNIP", "Anhanguera", "S√£o Judas", "Unicid"
        ],
        "N√£o prestou": ["N√£o Prestei Processo Seletivo em Outra Institui√ß√£o"],
        "Outro": ["Outro"]
    }

    def categorizar(inst):
        for categoria, lista in categorias.items():
            if inst in lista:
                return categoria
        return "Outro"

    todas_instituicoes = []
    for linha in respostas:
        try:
            if linha.startswith("[") and linha.endswith("]"):
                lista = ast.literal_eval(linha)
                for inst in lista:
                    inst_limpo = inst.strip()
                    if inst_limpo:
                        todas_instituicoes.append(inst_limpo)
            else:
                for inst in linha.split(";"):
                    inst_limpo = inst.strip()
                    if inst_limpo:
                        todas_instituicoes.append(inst_limpo)
        except:
            continue

    categorias_final = [categorizar(inst) for inst in todas_instituicoes]
    contagem = pd.Series(categorias_final).value_counts()
    total = contagem.sum()
    percentual = (contagem / total * 100).round(1)

    fig, ax = plt.subplots(figsize=(6, 4))
    percentual.sort_values().plot(kind='barh', ax=ax, color="#59A14F", edgecolor="black")
    ax.set_xlabel("Percentual (%)")
    ax.set_ylabel("Categoria")
    ax.set_title("Categorias de Institui√ß√µes Prestadas Al√©m da FECAP")
    for i, v in enumerate(percentual.sort_values()):
        ax.text(v + 0.5, i, f"{v:.1f}%", va='center')
    st.pyplot(fig)

def grafico_subcategorias_processo(df: pd.DataFrame, categoria_desejada: str):
    st.subheader(f"üîç Subcategorias em '{categoria_desejada}'")

    col = [c for c in df.columns if "processo seletivo em quais institui√ß√µes" in c.lower()]
    if not col:
        st.warning("Coluna do processo seletivo n√£o encontrada.")
        return

    coluna = col[0]
    respostas = df[coluna].dropna().astype(str)

    categorias = {
        "Federais": ["Federais (SISU)"],
        "Estaduais": ["USP (Fuvest)", "Unesp", "Unicamp"],
        "Privadas": [
            "FGV", "Insper", "FAAP", "Mackenzie", "PUC", "FEI", "FIAP",
            "Anhembi", "FMU", "Uninove", "UNIP", "Anhanguera", "S√£o Judas", "Unicid"
        ],
        "N√£o prestou": ["N√£o Prestei Processo Seletivo em Outra Institui√ß√£o"],
        "Outro": ["Outro"]
    }

    import ast
    todas_respostas = []
    for linha in respostas:
        try:
            if linha.startswith("[") and linha.endswith("]"):
                lista = ast.literal_eval(linha)
                for inst in lista:
                    todas_respostas.append(inst.strip())
            else:
                for inst in linha.split(";"):
                    todas_respostas.append(inst.strip())
        except:
            continue

    # Obter termos associados √† categoria
    termos_categoria = categorias.get(categoria_desejada, [])
    subrespostas = [resp for resp in todas_respostas if resp in termos_categoria]

    if not subrespostas:
        st.info("Nenhuma ocorr√™ncia encontrada para essa categoria.")
        return

    contagem = pd.Series(subrespostas).value_counts()
    total = contagem.sum()
    percentual = (contagem / total * 100).round(1)

    fig, ax = plt.subplots(figsize=(6, 4))
    percentual.sort_values().plot(kind='barh', ax=ax, color="#F28E2B", edgecolor="black")
    ax.set_xlabel("Percentual (%)")
    ax.set_ylabel("Institui√ß√£o")
    ax.set_title(f"Institui√ß√µes dentro da categoria: {categoria_desejada}")
    for i, v in enumerate(percentual.sort_values()):
        ax.text(v + 0.5, i, f"{v:.1f}%", va='center')
    st.pyplot(fig)

def grafico_percepcao_qualidade(df: pd.DataFrame):
    st.subheader("üèõÔ∏è Percep√ß√£o de Qualidade das Institui√ß√µes de Ensino")

    # Identificar colunas que s√£o as institui√ß√µes
    colunas_ies = [
        "USP", "FGV", "Insper", "FAAP", "Mackenzie", "PUC", "FECAP",
        "FEI", "FIAP", "Anhembi", "FMU", "Uninove", "UNIP", "Anhanguera"
    ]

    escala = [
        "N√£o conhe√ßo",
        "P√©ssima",
        "Ruim",
        "Regular",
        "√ìtima",
        "Excelente"
    ]

    dados_plot = pd.DataFrame()

    for coluna in colunas_ies:
        if coluna in df.columns:
            contagem = df[coluna].value_counts().reindex(escala, fill_value=0)
            dados_plot[coluna] = contagem

    dados_plot = dados_plot.T
    dados_plot.index.name = "Institui√ß√£o"
    dados_plot.reset_index(inplace=True)

    # Construir gr√°fico de barras empilhadas
    fig = go.Figure()
    for cat in escala:
        fig.add_trace(go.Bar(
            y=dados_plot["Institui√ß√£o"],
            x=dados_plot[cat],
            name=cat,
            orientation="h"
        ))

    fig.update_layout(
        barmode="stack",
        colorway=[
        "#D3D3D3",  # N√£o conhe√ßo
        "#8B0000",  # P√©ssima
        "#FF9999",  # Ruim
        "#A9A9A9",  # Regular
        "#90EE90",  # √ìtima
        "#006400"   # Excelente
        ],
        xaxis_title="N√∫mero de Respostas",
        yaxis_title="Institui√ß√£o de Ensino",
        title="Percep√ß√£o de Qualidade das Institui√ß√µes de Ensino",
        height=900,
        legend_title="N√≠vel de Qualidade"
    )

    st.plotly_chart(fig, use_container_width=True)

def limpar_texto(texto, tipo="motivos"):
    # Lista de stopwords em portugu√™s
    stop_words = set(stopwords.words("portuguese"))
    
    # Palavras indesejadas para motivos de escolha
    palavras_indesejadas_motivos = {
        "fecap", "curso", "faculdade", "ensino", "boa", "gostei", "ano", "aten√ß√£o", "outra", "alta", "dentro",
        "pesquisei", "achei", "Paulo", "falar", "principalmente", "forte", "motivo", "grande", "escolhido",
        "possui", "interesse", "outras", "pois", "ter", "foco", "quanto", "quero", "Paulo", "pais", "acredito",
        "fiz", "oferece", "devido", "bom", "anos", "consegui", "objetivo", "Paulo", "todo", "nota", "o", "a",
        "que", "de", "e", "para", "com", "sobre", "tamb√©m", "fazer", "meu", "trabalho", "minha", "um", "uma", 
        "localiza√ß√£o", "escolhi", 'al√©m', "bem", "muito", "vi", "ainda", "pai", "porque", "institui√ß√£o", "√≥tima",
        "boa", "pessoas"
    }

    # Palavras indesejadas para expectativas do curso
    palavras_indesejadas_expectativas = {
        "fecap", "curso", "faculdade", "grade", "curricular", "ensino", "professores", "boa", "institui√ß√£o", "nota", "espero", "tornar", "boas", "conseguir", ""
        "o", "a", "que", "de", "e", "para", "com", "sobre", "tamb√©m", "fazer", "meu", "trabalho", "minha", "um", 
        "uma", "localiza√ß√£o", "escolhi", "mercado", "profissional", "experi√™ncia", "desenvolver", "aprendizado", 
        "alto", "√°rea", "espero", "expectativa", "bastante", "qualidade", "trabalhar", "aprender"
    }
    
    # Palavras indesejadas para objetivos de vida
    palavras_indesejadas_objetivos = {
        "objetivo", "profissional", "vida", "futuro", "carreira", "crescimento", "desenvolvimento", 
        "pessoal", "expectativa", "sucesso", "trabalho", "realiza√ß√£o", "conquista", "qualidade", 
        "aprender", "experi√™ncia", "aproveitar", "mercado", "carreira", "ser", "muito", "novos", 
        "desafios", "vencer","busco", "em", "minha", "meu", "espero", "alcan√ßar", 
        "adquirir", "fazer", "aproveitar", "ter", "Ter", "possa", ".", "assim", "surtando", "M√©dio",
        ""
    }

    # Escolher a lista de palavras indesejadas com base no tipo de texto
    if tipo == "motivos":
        palavras_indesejadas = palavras_indesejadas_motivos
    elif tipo == "expectativas":
        palavras_indesejadas = palavras_indesejadas_expectativas
    else:
        palavras_indesejadas = palavras_indesejadas_objetivos

    # Quebrar o texto em palavras
    palavras = texto.split()

    # Remover stopwords e palavras indesejadas
    palavras_limpas = [p for p in palavras if p.lower() not in stop_words and p.lower() not in palavras_indesejadas]

    return " ".join(palavras_limpas)

def grafico_motivos_escolha(df: pd.DataFrame):
    st.subheader("üéØ Motivos para Escolher a FECAP")

    coluna = "Os motivos de sua escolha pela FECAP"
    
    if coluna not in df.columns:
        st.warning("Coluna dos motivos de escolha n√£o foi encontrada.")
        return

    respostas = df[coluna].dropna().astype(str)
    respostas_limpas = respostas.apply(limpar_texto)
    todas_respostas = " ".join(respostas_limpas)

    # Contar as palavras e ordenar por frequ√™ncia
    palavras_frequentes = pd.Series(todas_respostas.split()).value_counts().reset_index()
    palavras_frequentes.columns = ["Palavra", "Frequ√™ncia"]

    # Selecionar as 20 palavras mais frequentes
    palavras_top_20 = palavras_frequentes.head(21)

    # Gerar a nuvem de palavras com as 20 palavras mais frequentes
    wordcloud = WordCloud(width=800, height=400, background_color="white").generate(" ".join(palavras_top_20["Palavra"]))

    # Mostrar a nuvem de palavras
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis("off")
    st.pyplot(plt)

    # Exibir as palavras mais frequentes com percentuais
    palavras_top_20["Percentual"] = (palavras_top_20["Frequ√™ncia"] / palavras_top_20["Frequ√™ncia"].sum() * 100).round(2)

    # Exibir a tabela com as top 20 palavras
    st.dataframe(palavras_top_20)

def grafico_expectativas_curso(df: pd.DataFrame):
    st.subheader("üéì Expectativas com o Curso Escolhido")

    coluna = "Suas expectativas quanto ao Curso escolhido"
    
    if coluna not in df.columns:
        st.warning("Coluna das expectativas quanto ao curso escolhido n√£o foi encontrada.")
        return

    # Obter as respostas da coluna
    respostas = df[coluna].dropna().astype(str)

    # Limpar as respostas
    respostas_limpas = respostas.apply(limpar_texto)

    # Unir todas as respostas em uma √∫nica string
    todas_respostas = " ".join(respostas_limpas)

    # Contar as palavras e ordenar por frequ√™ncia
    palavras_frequentes = pd.Series(todas_respostas.split()).value_counts().reset_index()
    palavras_frequentes.columns = ["Palavra", "Frequ√™ncia"]

    # Selecionar as 20 palavras mais frequentes
    palavras_top_20 = palavras_frequentes.head(21)

    # Gerar a nuvem de palavras com as 20 palavras mais frequentes
    wordcloud = WordCloud(width=800, height=400, background_color="white").generate(" ".join(palavras_top_20["Palavra"]))

    # Mostrar a nuvem de palavras
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis("off")
    st.pyplot(plt)

    # Exibir as palavras mais frequentes com percentuais
    palavras_top_20["Percentual"] = (palavras_top_20["Frequ√™ncia"] / palavras_top_20["Frequ√™ncia"].sum() * 100).round(2)

    # Exibir a tabela com as top 20 palavras
    st.dataframe(palavras_top_20)

def grafico_objetivos_profissionais(df: pd.DataFrame):
    st.subheader("üåü Objetivos Profissionais e de Vida")

    coluna = "Seus objetivos profissionais e de vida."
    
    if coluna not in df.columns:
        st.warning("Coluna dos objetivos profissionais e de vida n√£o foi encontrada.")
        return

    # Obter as respostas da coluna
    respostas = df[coluna].dropna().astype(str)

    # Limpar as respostas
    respostas_limpas = respostas.apply(limpar_texto)

    # Unir todas as respostas em uma √∫nica string
    todas_respostas = " ".join(respostas_limpas)

    # Contar as palavras e ordenar por frequ√™ncia
    palavras_frequentes = pd.Series(todas_respostas.split()).value_counts().reset_index()
    palavras_frequentes.columns = ["Palavra", "Frequ√™ncia"]

    # Selecionar as 20 palavras mais frequentes
    palavras_top_20 = palavras_frequentes.head(21)

    # Gerar a nuvem de palavras com as 20 palavras mais frequentes
    wordcloud = WordCloud(width=800, height=400, background_color="white").generate(" ".join(palavras_top_20["Palavra"]))

    # Mostrar a nuvem de palavras
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis("off")
    st.pyplot(plt)

    # Exibir as palavras mais frequentes com percentuais
    palavras_top_20["Percentual"] = (palavras_top_20["Frequ√™ncia"] / palavras_top_20["Frequ√™ncia"].sum() * 100).round(2)

    # Exibir a tabela com as top 20 palavras
    st.dataframe(palavras_top_20)

def grafico_recomendacao(df: pd.DataFrame):
    st.subheader("üí¨ Recomenda√ß√£o da FECAP")

    coluna = "Considerando sua experi√™ncia at√© o momento da matr√≠cula na FECAP, o quanto voc√™ nos recomendaria a seus amigos e familiares?"
    
    if coluna not in df.columns:
        st.warning("Coluna de recomenda√ß√£o n√£o foi encontrada.")
        return

    # Obter as respostas da coluna
    respostas = df[coluna].dropna().astype(int)

    # Contar as respostas de 0 a 10
    recomendacao_contagem = respostas.value_counts().sort_index()

    # Gerar gr√°fico de barras
    fig, ax = plt.subplots(figsize=(10, 6))
    recomendacao_contagem.plot(kind='bar', ax=ax, color='#4E79A7', edgecolor="black")
    ax.set_xlabel("Escala de Recomenda√ß√£o")
    ax.set_ylabel("N√∫mero de Respostas")
    ax.set_title("Distribui√ß√£o da Recomenda√ß√£o da FECAP")
    ax.set_xticks(range(11))
    ax.set_xticklabels(range(11))
    for i, v in enumerate(recomendacao_contagem):
        ax.text(i, v + 1, str(v), ha='center', va='bottom', fontsize=10)

    # Mostrar o gr√°fico no Streamlit
    st.pyplot(fig)